# From: https://java.testcontainers.org/supported_docker_environment/continuous_integration/gitlab_ci/
# DinD service is required for Testcontainers
variables:
  DOCKER_VERSION: "24.0"
  # Instruct Testcontainers to use the daemon of DinD, use port 2375 for non-tls connections.
  DOCKER_HOST: "tcp://docker:2375"
  # Instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  # Improve performance with overlayfs.
  DOCKER_DRIVER: overlay2

  # https://java.testcontainers.org/features/image_name_substitution/
  TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/

  MAVEN_REPO_DIR: $CI_PROJECT_DIR/.m2/repository

  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Xmx256m
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
  # of the `Slf4jMavenTransferListener` is no longer necessary.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    --update-snapshots
#    -DinstallAtEnd=true
#    -DdeployAtEnd=true

  # Specify the timezone - used by date tests
  TZ: "Europe/Brussels"
  # Specify a language - used by LocaleContextHolder
  LANG: "en_US.UTF-8"

  ORACLE_INIT_SQL: |
    CREATE USER axt IDENTIFIED BY across_test;
    GRANT CONNECT, RESOURCE TO axt;
    GRANT CREATE SESSION, GRANT ANY PRIVILEGE TO axt;
    GRANT UNLIMITED TABLESPACE TO axt;
    GRANT SELECT ON SYS.DBA_RECYCLEBIN TO AXT;


# Keep version and apt-get commands in sync between .gitlab-ci.yml, Dockerfiles and .java files (for testcontainers):
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
cache:
  paths:
    - $MAVEN_REPO_DIR

after_script:
  - rm -rf $MAVEN_REPO_DIR/com/foreach || echo "Nothing to delete" # Don't cache this
  # It appears 4GB is not enough for some of the tests with Oracle (but that's not really the case ...):
  # - I've seen the oracle job duration vary widely from 5 to 20 min. I've seen it 'hang' (no output) for a long time: this might be swapping.
  # - I've seen at least two cases where maven was killed, probably by the OOM killer (but nothing to really confirm that):
  #   https://gitlab.isaac.nl/antwerpen/across/across-media-modules/-/jobs/475011
  #   https://gitlab.isaac.nl/antwerpen/across/across-media-modules/-/jobs/475134
  # From a dmesg from a later job (https://gitlab.isaac.nl/antwerpen/across/across-media-modules/-/jobs/475188),
  # I could see there was at least once a java process killed by the OOM killer:
  #   [19004.343810] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/docker/c480de908f743e035dec8a9b846eba3f435b4d713bef9aba16b3c50cb4789d7c,task=java,pid=54980,uid=0
  #   [19004.343853] Out of memory: Killed process 54980 (java) total-vm:3435944kB, anon-rss:674984kB, file-rss:0kB, shmem-rss:0kB, UID:0 pgtables:1644kB oom_score_adj:0
  #   [19004.383415] oom_reaper: reaped process 54980 (java), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
  # With almost 3.5 GiB that makes sense.
  # From the info higher in that job log (from dmesg) we can also see that Oracle was running,
  # and that there were two java processes:
  #   [19004.343584] [  pid  ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name
  #   [19004.343749] [  54980]     0 54980   858986   168746  1683456        0             0 java
  #   [19004.343783] [  56559]     0 56559   869420   148972  1544192        0             0 java
  # (total_vm unit is pages => 858986 * 4kB = 3435944kB)
  # This would also mean that maven is the one with the most memory, not Oracle, nor the JVM started by surefire/failsafe to run the tests ...
  # But then again, the output of `free` confirms that there is no swap (as it should be) ...
  # To work around this, we had to set-Xmx for both maven itself (-Xmx256m) and for the JVM forked by the maven-failsafe-plugin (-Xmx512m)
  # - 'free -m || echo "free command failed (most likely not present)"'
  # - 'dmesg || echo "dmesg command failed (most likely not present)"'

.frontend:
  stage: test
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:9.10.1
  script:
    - cd ${FRONTEND_DIR}
    - yarn install
    #- yarn build:prod
    - ./node_modules/gulp/bin/gulp.js scss js --production

frontend:file-manager-module:
  extends:
    - .frontend
  variables:
    FRONTEND_DIR: file-manager-module/src/main/frontend
  artifacts:
    paths:
      - file-manager-module/src/main/resources/views/static/FileManagerModule/


# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify:
  stage: test
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
      alias: docker
      command: [ "--tls=false" ]
  script:
    - apt-get update
    - apt-get install -y ghostscript graphicsmagick docker.io
    # Needed for testcontainers to go through the GitLab Dependency Proxy:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    # - 'mvn $MAVEN_CLI_OPTS dependency:purge-local-repository -DmanualInclude=com.foreach -DreResolve=false'
    - find $CI_PROJECT_DIR/.m2/repository/com/foreach/ -type d -name "*-SNAPSHOT" | xargs rm -rf || echo "No snapshots to delete"
    - 'mvn $MAVEN_CLI_OPTS verify'
  artifacts:
    when: always
    reports:
      junit:
        - '**/target/surefire-reports/TEST-*.xml'
        - '**/target/failsafe-reports/TEST-*.xml'
#  except:
#    variables:
#      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

verify:jdk8:
  extends:
    - .verify
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-8

#verify:jdk11:
#  extends:
#    - .verify
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-11
#
#verify:jdk17:
#  extends:
#    - .verify
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-17
#
#verify:jdk21:
#  extends:
#    - .verify
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-21

.itest:
  stage: test
# Objects are merged in .gitlab-ci.yml files, but arrays are overwritten; so this needs to be duplicated in each itest job:
#  services:
#    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
#      alias: docker
#      command: [ "--tls=false" ]
  script:
    - apt-get update
    - apt-get install -y ghostscript graphicsmagick docker.io
    # Needed for testcontainers to go through the GitLab Dependency Proxy:
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    # - 'mvn $MAVEN_CLI_OPTS dependency:purge-local-repository -DmanualInclude=com.foreach -DreResolve=false'
    - find $CI_PROJECT_DIR/.m2/repository/com/foreach/ -type d -name "*-SNAPSHOT" | xargs rm -rf || echo "No snapshots to delete"
    - 'free -m || echo "free command failed (most likely not present)"'
    - 'uptime || echo "uptime command failed (most likely not present)"'
    - 'mvn $MAVEN_CLI_OPTS test-compile failsafe:integration-test failsafe:verify -DacrossTest.datasource="$ACROSS_TEST_DATASOURCE" -Dmaven.javadoc.skip=true'
  artifacts:
    when: always
    reports:
      junit:
        - '**/target/surefire-reports/TEST-*.xml'
        - '**/target/failsafe-reports/TEST-*.xml'

itest:h2:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: h2
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
      alias: docker
      command: [ "--tls=false" ]

itest:mssql:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: mssql
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
      alias: docker
      command: [ "--tls=false" ]
    - name: mcr.microsoft.com/mssql/server:2017-latest
      alias: 'mssql'
      variables:
        ACCEPT_EULA: Y
        MSSQL_SA_PASSWORD: across_tEst
        MSSQL_PID: Developer

itest:mysql:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: mysql
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
      alias: docker
      command: [ "--tls=false" ]
    - name: '${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/mysql:8.0'
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: ''
        MYSQL_DATABASE: axt
        MYSQL_USER: axt
        MYSQL_PASSWORD: across_test
        MYSQL_ALLOW_EMPTY_PASSWORD: 'true'

itest:oracle:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: oracle
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
      alias: docker
      command: [ "--tls=false" ]
    - name: '${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/gvenzl/oracle-xe:18.4.0-slim' # This what testcontainers 1.18.1 uses
      alias: 'oracle'
      variables:
        ORACLE_ALLOW_REMOTE: 'true'
        ORACLE_ENABLE_XDB: 'true'
        # IT IS SAID THAT THIS IS MORE PERFORMANT IN DOCKER
        ORACLE_DISABLE_ASYNCH_IO: 'true'
        ORACLE_PASSWORD: across_test
      # You cannot mount volumes in a service container, this is a workaround for that:
      # Solution inspired by: https://stackoverflow.com/questions/72201392/mounting-a-volume-for-a-gitlab-service
      # Doesn't work: the /docker-entrypoint-initdb.d directory doesn't exist in the image, and creating it gives:
      #   mkdir: cannot create directory '/docker-entrypoint-initdb.d/': Permission denied
      # However: /container-entrypoint-initdb.d does exist! See: https://github.com/gvenzl/oci-oracle-xe/issues/108
      # entrypoint: ['/bin/bash', "-c", 'echo "c" > /container-entrypoint-initdb.d/init.sql && container-entrypoint.sh']
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          echo "$ORACLE_INIT_SQL" > /container-entrypoint-initdb.d/init.sql
          cat /container-entrypoint-initdb.d/*
          wc -l /container-entrypoint-initdb.d/*
          container-entrypoint.sh

itest:postgresql:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: postgres
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:${DOCKER_VERSION}-dind
      alias: docker
      command: [ "--tls=false" ]
    - name: '${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/postgres:14.8'
      alias: postgres
      variables:
        POSTGRES_DB: axt
        POSTGRES_USER: axt
        POSTGRES_PASSWORD: across_test

deploy:foreach:
  stage: deploy
  before_script:
    - apt-get update
    - apt-get -y install gpg
    - gpg --pinentry-mode loopback --passphrase $ACROSS_GPG_PASSPHRASE --import $ACROSS_GPG_PRIVATE_KEY
    - gpg --list-keys
  script:
    - mvn $MAVEN_CLI_OPTS --settings ci_settings.xml -Pacross deploy -DskipTests
#  only:
#    variables:
#      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#

# TODO: on push of a tag, run a deploy to Sonatype
# Disadvantage is that that will run all integration tests again, unless we want disable those on a tag push
